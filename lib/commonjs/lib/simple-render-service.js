import { Err, Ok, Res } from "./core/result";
class SimpleRenderService {
    constructor(converters, table) {
        this.#converters = converters;
        this.#table = table;
    }
    #converters;
    #table;
    itemToHeader(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertHeader(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    render(input) {
        const headers = input.current.items.map((x) => this.itemToHeader(x));
        const header = Res.all(...headers).map((x) => x.join("\n\n"));
        const table = this.#table.generateTable(input.history);
        return header.andThen((currentMarkdown) => table.map((historyMarkdown) => ({ currentMarkdown, historyMarkdown })));
    }
}
export { SimpleRenderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXJlbmRlci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zaW1wbGUtcmVuZGVyLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBTXJELE1BQU0sbUJBQW1CO0lBQ3ZCLFlBQVksVUFBdUIsRUFBRSxLQUFxQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRVEsV0FBVyxDQUFjO0lBQ3pCLE1BQU0sQ0FBaUI7SUFFaEMsWUFBWSxDQUFDLElBQWlCO1FBQzVCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQzVELENBQUM7WUFDRixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxHQUFHLENBQ1IsSUFBSSxLQUFLLENBQUMsK0JBQStCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDM0QsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEU7WUFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBa0I7UUFDdkIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRTlELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUN4QyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FDdkUsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uSW5wdXQsIERhdGFFbGVtZW50IH0gZnJvbSBcIi4vaW5wdXRcIjtcbmltcG9ydCB7IEVyciwgT2ssIFJlcywgUmVzdWx0IH0gZnJvbSBcIi4vY29yZS9yZXN1bHRcIjtcbmltcG9ydCB7IFJlbmRlclNlcnZpY2UgfSBmcm9tIFwiLi9pbnRlcmZhY2Uvc2VydmljZVwiO1xuaW1wb3J0IHsgQ29udmVydGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlL2NvbnZlcnRlclwiO1xuaW1wb3J0IHsgVGFibGVHZW5lcmF0b3IgfSBmcm9tIFwiLi9pbnRlcmZhY2UvdGFibGUtZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyBPdXRwdXQgfSBmcm9tIFwiLi9vdXRwdXRcIjtcblxuY2xhc3MgU2ltcGxlUmVuZGVyU2VydmljZSBpbXBsZW1lbnRzIFJlbmRlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXSwgdGFibGU6IFRhYmxlR2VuZXJhdG9yKSB7XG4gICAgdGhpcy4jY29udmVydGVycyA9IGNvbnZlcnRlcnM7XG4gICAgdGhpcy4jdGFibGUgPSB0YWJsZTtcbiAgfVxuXG4gIHJlYWRvbmx5ICNjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXTtcbiAgcmVhZG9ubHkgI3RhYmxlOiBUYWJsZUdlbmVyYXRvcjtcblxuICBpdGVtVG9IZWFkZXIoaXRlbTogRGF0YUVsZW1lbnQpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcj4ge1xuICAgIHJldHVybiBSZXMuYXN5bmMoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udmVydGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHRoaXMuI2NvbnZlcnRlcnMubWFwKChjKSA9PiBjLmNvbnZlcnRIZWFkZXIoaXRlbSkubmF0aXZlKCkpXG4gICAgICApO1xuICAgICAgY29uc3QgdG9wID0gY29udmVydGVkLmZpbHRlcigoeCkgPT4geCAhPSBudWxsKTtcbiAgICAgIGlmICh0b3AubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIGlmICh0b3AubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiBFcnIoXG4gICAgICAgICAgICBuZXcgRXJyb3IoYE11bHRpcGxlIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXJyKG5ldyBFcnJvcihgTm8gY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9rKHRvcFswXSBhcyBzdHJpbmcpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKGlucHV0OiBBY3Rpb25JbnB1dCk6IFJlc3VsdDxPdXRwdXQsIEVycm9yW10+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gaW5wdXQuY3VycmVudC5pdGVtcy5tYXAoKHgpID0+IHRoaXMuaXRlbVRvSGVhZGVyKHgpKTtcbiAgICBjb25zdCBoZWFkZXIgPSBSZXMuYWxsKC4uLmhlYWRlcnMpLm1hcCgoeCkgPT4geC5qb2luKFwiXFxuXFxuXCIpKTtcblxuICAgIGNvbnN0IHRhYmxlID0gdGhpcy4jdGFibGUuZ2VuZXJhdGVUYWJsZShpbnB1dC5oaXN0b3J5KTtcbiAgICByZXR1cm4gaGVhZGVyLmFuZFRoZW4oKGN1cnJlbnRNYXJrZG93bikgPT5cbiAgICAgIHRhYmxlLm1hcCgoaGlzdG9yeU1hcmtkb3duKSA9PiAoeyBjdXJyZW50TWFya2Rvd24sIGhpc3RvcnlNYXJrZG93biB9KSlcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IFNpbXBsZVJlbmRlclNlcnZpY2UgfTtcbiJdfQ==