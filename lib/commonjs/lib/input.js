import { array, discriminatedUnion, literal, number, object, optional, string, union, } from "zod";
// Policies
const policyResult = union([literal("pass"), literal("warn"), literal("fail")]);
const policyData = object({
    pass: array(string()),
    warn: array(string()),
    fail: array(string()),
});
const base = object({
    result: policyResult,
    resultDetails: policyData,
});
// Meta data
const testResultMetadata = base
    .extend({
    type: literal("test-result"),
    pass: number().min(0),
    fail: number().min(0),
    skip: number().min(0),
})
    .strict();
const documentationMetadata = base
    .extend({
    type: literal("documentation"),
})
    .strict();
const codeQualityMetadata = base
    .extend({
    type: literal("code-quality"),
    qualityRating: string(),
})
    .strict();
const testCoverageMetadata = base
    .extend({
    type: literal("test-coverage"),
    delta: optional(object({
        line: number().min(-100).max(100),
        statement: number().min(-100).max(100),
        function: number().min(-100).max(100),
        branch: number().min(-100).max(100),
    }).strict()),
    line: number().min(0).max(100),
    statement: number().min(0).max(100),
    function: number().min(0).max(100),
    branch: number().min(0).max(100),
})
    .strict();
const metadata = discriminatedUnion("type", [
    codeQualityMetadata,
    documentationMetadata,
    testCoverageMetadata,
    testResultMetadata,
]);
// input object
const dataElement = object({
    name: string(),
    url: string().url(),
    data: metadata,
}).strict();
const dataElementArray = array(dataElement);
const historyEntry = object({
    sha: string(),
    url: string(),
    action: string(),
    items: dataElementArray,
}).strict();
const history = array(historyEntry);
export { metadata, dataElement, dataElementArray, historyEntry, history };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxLQUFLLEVBQ0wsa0JBQWtCLEVBQ2xCLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLFFBQVEsRUFDUixNQUFNLEVBQ04sS0FBSyxHQUVOLE1BQU0sS0FBSyxDQUFDO0FBRWIsV0FBVztBQUNYLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVoRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyQixJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JCLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDdEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2xCLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLGFBQWEsRUFBRSxVQUFVO0NBQzFCLENBQUMsQ0FBQztBQUVILFlBQVk7QUFFWixNQUFNLGtCQUFrQixHQUFHLElBQUk7S0FDNUIsTUFBTSxDQUFDO0lBQ04sSUFBSSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDNUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdEIsQ0FBQztLQUNELE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxxQkFBcUIsR0FBRyxJQUFJO0tBQy9CLE1BQU0sQ0FBQztJQUNOLElBQUksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0NBQy9CLENBQUM7S0FDRCxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0sbUJBQW1CLEdBQUcsSUFBSTtLQUM3QixNQUFNLENBQUM7SUFDTixJQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUM3QixhQUFhLEVBQUUsTUFBTSxFQUFFO0NBQ3hCLENBQUM7S0FDRCxNQUFNLEVBQUUsQ0FBQztBQUNaLE1BQU0sb0JBQW9CLEdBQUcsSUFBSTtLQUM5QixNQUFNLENBQUM7SUFDTixJQUFJLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUM5QixLQUFLLEVBQUUsUUFBUSxDQUNiLE1BQU0sQ0FBQztRQUNMLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ2pDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3RDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0tBQ3BDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FDWjtJQUNELElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUM5QixTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDbkMsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztDQUNqQyxDQUFDO0tBQ0QsTUFBTSxFQUFFLENBQUM7QUFFWixNQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUU7SUFDMUMsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIsa0JBQWtCO0NBQ25CLENBQUMsQ0FBQztBQUVILGVBQWU7QUFFZixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7SUFDekIsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUNkLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUU7SUFDbkIsSUFBSSxFQUFFLFFBQVE7Q0FDZixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFWixNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUU1QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUM7SUFDMUIsR0FBRyxFQUFFLE1BQU0sRUFBRTtJQUNiLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDYixNQUFNLEVBQUUsTUFBTSxFQUFFO0lBQ2hCLEtBQUssRUFBRSxnQkFBZ0I7Q0FDeEIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBZXBDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFycmF5LFxuICBkaXNjcmltaW5hdGVkVW5pb24sXG4gIGxpdGVyYWwsXG4gIG51bWJlcixcbiAgb2JqZWN0LFxuICBvcHRpb25hbCxcbiAgc3RyaW5nLFxuICB1bmlvbixcbiAgeixcbn0gZnJvbSBcInpvZFwiO1xuXG4vLyBQb2xpY2llc1xuY29uc3QgcG9saWN5UmVzdWx0ID0gdW5pb24oW2xpdGVyYWwoXCJwYXNzXCIpLCBsaXRlcmFsKFwid2FyblwiKSwgbGl0ZXJhbChcImZhaWxcIildKTtcblxuY29uc3QgcG9saWN5RGF0YSA9IG9iamVjdCh7XG4gIHBhc3M6IGFycmF5KHN0cmluZygpKSxcbiAgd2FybjogYXJyYXkoc3RyaW5nKCkpLFxuICBmYWlsOiBhcnJheShzdHJpbmcoKSksXG59KTtcblxuY29uc3QgYmFzZSA9IG9iamVjdCh7XG4gIHJlc3VsdDogcG9saWN5UmVzdWx0LFxuICByZXN1bHREZXRhaWxzOiBwb2xpY3lEYXRhLFxufSk7XG5cbi8vIE1ldGEgZGF0YVxuXG5jb25zdCB0ZXN0UmVzdWx0TWV0YWRhdGEgPSBiYXNlXG4gIC5leHRlbmQoe1xuICAgIHR5cGU6IGxpdGVyYWwoXCJ0ZXN0LXJlc3VsdFwiKSxcbiAgICBwYXNzOiBudW1iZXIoKS5taW4oMCksXG4gICAgZmFpbDogbnVtYmVyKCkubWluKDApLFxuICAgIHNraXA6IG51bWJlcigpLm1pbigwKSxcbiAgfSlcbiAgLnN0cmljdCgpO1xuXG5jb25zdCBkb2N1bWVudGF0aW9uTWV0YWRhdGEgPSBiYXNlXG4gIC5leHRlbmQoe1xuICAgIHR5cGU6IGxpdGVyYWwoXCJkb2N1bWVudGF0aW9uXCIpLFxuICB9KVxuICAuc3RyaWN0KCk7XG5cbmNvbnN0IGNvZGVRdWFsaXR5TWV0YWRhdGEgPSBiYXNlXG4gIC5leHRlbmQoe1xuICAgIHR5cGU6IGxpdGVyYWwoXCJjb2RlLXF1YWxpdHlcIiksXG4gICAgcXVhbGl0eVJhdGluZzogc3RyaW5nKCksXG4gIH0pXG4gIC5zdHJpY3QoKTtcbmNvbnN0IHRlc3RDb3ZlcmFnZU1ldGFkYXRhID0gYmFzZVxuICAuZXh0ZW5kKHtcbiAgICB0eXBlOiBsaXRlcmFsKFwidGVzdC1jb3ZlcmFnZVwiKSxcbiAgICBkZWx0YTogb3B0aW9uYWwoXG4gICAgICBvYmplY3Qoe1xuICAgICAgICBsaW5lOiBudW1iZXIoKS5taW4oLTEwMCkubWF4KDEwMCksXG4gICAgICAgIHN0YXRlbWVudDogbnVtYmVyKCkubWluKC0xMDApLm1heCgxMDApLFxuICAgICAgICBmdW5jdGlvbjogbnVtYmVyKCkubWluKC0xMDApLm1heCgxMDApLFxuICAgICAgICBicmFuY2g6IG51bWJlcigpLm1pbigtMTAwKS5tYXgoMTAwKSxcbiAgICAgIH0pLnN0cmljdCgpXG4gICAgKSxcbiAgICBsaW5lOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG4gICAgc3RhdGVtZW50OiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG4gICAgZnVuY3Rpb246IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbiAgICBicmFuY2g6IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbiAgfSlcbiAgLnN0cmljdCgpO1xuXG5jb25zdCBtZXRhZGF0YSA9IGRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICBjb2RlUXVhbGl0eU1ldGFkYXRhLFxuICBkb2N1bWVudGF0aW9uTWV0YWRhdGEsXG4gIHRlc3RDb3ZlcmFnZU1ldGFkYXRhLFxuICB0ZXN0UmVzdWx0TWV0YWRhdGEsXG5dKTtcblxuLy8gaW5wdXQgb2JqZWN0XG5cbmNvbnN0IGRhdGFFbGVtZW50ID0gb2JqZWN0KHtcbiAgbmFtZTogc3RyaW5nKCksXG4gIHVybDogc3RyaW5nKCkudXJsKCksXG4gIGRhdGE6IG1ldGFkYXRhLFxufSkuc3RyaWN0KCk7XG5cbmNvbnN0IGRhdGFFbGVtZW50QXJyYXkgPSBhcnJheShkYXRhRWxlbWVudCk7XG5cbmNvbnN0IGhpc3RvcnlFbnRyeSA9IG9iamVjdCh7XG4gIHNoYTogc3RyaW5nKCksXG4gIHVybDogc3RyaW5nKCksXG4gIGFjdGlvbjogc3RyaW5nKCksXG4gIGl0ZW1zOiBkYXRhRWxlbWVudEFycmF5LFxufSkuc3RyaWN0KCk7XG5cbmNvbnN0IGhpc3RvcnkgPSBhcnJheShoaXN0b3J5RW50cnkpO1xuXG50eXBlIERhdGFFbGVtZW50ID0gei5pbmZlcjx0eXBlb2YgZGF0YUVsZW1lbnQ+O1xuZGVjbGFyZSBsZXQgeDogRGF0YUVsZW1lbnQ7XG50eXBlIE1ldGFkYXRhRW51bSA9IHR5cGVvZiB4LmRhdGEudHlwZTtcbnR5cGUgRGF0YUVsZW1lbnRBcnJheSA9IHouaW5mZXI8dHlwZW9mIGRhdGFFbGVtZW50QXJyYXk+O1xudHlwZSBIaXN0b3J5RW50cnkgPSB6LmluZmVyPHR5cGVvZiBoaXN0b3J5RW50cnk+O1xudHlwZSBIaXN0b3J5ID0gei5pbmZlcjx0eXBlb2YgaGlzdG9yeT47XG50eXBlIFBvbGljeVJlc3VsdCA9IHouaW5mZXI8dHlwZW9mIHBvbGljeVJlc3VsdD47XG50eXBlIFBvbGljeURhdGEgPSB6LmluZmVyPHR5cGVvZiBwb2xpY3lEYXRhPjtcbnR5cGUgQWN0aW9uSW5wdXQgPSB7XG4gIGN1cnJlbnQ6IEhpc3RvcnlFbnRyeTtcbiAgaGlzdG9yeTogSGlzdG9yeTtcbn07XG5cbmV4cG9ydCB7IG1ldGFkYXRhLCBkYXRhRWxlbWVudCwgZGF0YUVsZW1lbnRBcnJheSwgaGlzdG9yeUVudHJ5LCBoaXN0b3J5IH07XG5cbmV4cG9ydCB0eXBlIHtcbiAgQWN0aW9uSW5wdXQsXG4gIFBvbGljeURhdGEsXG4gIE1ldGFkYXRhRW51bSxcbiAgRGF0YUVsZW1lbnQsXG4gIERhdGFFbGVtZW50QXJyYXksXG4gIEhpc3RvcnlFbnRyeSxcbiAgUG9saWN5UmVzdWx0LFxuICBIaXN0b3J5LFxufTtcbiJdfQ==