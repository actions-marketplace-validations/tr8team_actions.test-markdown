import { None, Some } from "../core/option";
import { emoji, resultToColor, resultToMarkdown } from "../util";
class TestCoverageConverter {
    convertHeader(header) {
        return this.convertTable(header).andThen((badge) => {
            if (header.data.type === "test-coverage") {
                const f = emoji(header.data.result);
                const h = `##### ${f}  ${header.name}\n`;
                const coverage = `
        **Basic Coverage**: \\
        | Type | Coverage |
        | ---- | -------- |
        | Line | ${header.data.line.toFixed(2)}% |
        | Statement | ${header.data.statement.toFixed(2)}% |
        | Function | ${header.data.function.toFixed(2)}% |
        | Branch | ${header.data.branch.toFixed(2)}% |
`;
                const diff = header.data.delta;
                const dEmoji = (d) => (d > 0 ? "‚è´" : "‚è¨");
                const delta = diff == null
                    ? ""
                    : `**Change from base of PR**: \\
| Type | Coverage |
| ---- | -------- |
| Line | ${diff.line.toFixed(2)}% ${dEmoji(diff.line)} |
| Statement | ${diff.statement.toFixed(2)}% ${dEmoji(diff.statement)} |
| Function | ${diff.function.toFixed(2)}% ${dEmoji(diff.function)} |
| Branch | ${diff.branch.toFixed(2)}% ${dEmoji(diff.branch)} |
`;
                const policy = resultToMarkdown(header.data.resultDetails);
                return Some(`
 ${h}
 Report: ${badge}
 ${coverage}
 ${delta}
  ${policy}
`);
            }
            return None();
        });
    }
    convertTable(table) {
        if (table.data.type === "test-coverage") {
            const color = resultToColor(table.data.result);
            const d = table.data;
            // ‚ò≤ 100% | ‚à¨ 90.2% | üúâ 25.5%
            return Some(`[![badge](https://img.shields.io/badge/coverage` +
                `-%E2%98%B2%20${d.statement.toFixed(1)}%25%20%7C%20%E2%88%AC%20${d.function.toFixed(1)}%25%20%7C%20%F0%9F%9C%89%20${d.branch.toFixed(1)}%25` +
                `-${color})](${table.url})`);
        }
        return None();
    }
}
export { TestCoverageConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1jb3ZlcmFnZS1jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbnZlcnRlci90ZXN0LWNvdmVyYWdlLWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFVLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpFLE1BQU0scUJBQXFCO0lBQ3pCLGFBQWEsQ0FBQyxNQUFtQjtRQUMvQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDakQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLEVBQUU7Z0JBQ3hDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7Z0JBQ3pDLE1BQU0sUUFBUSxHQUFHOzs7O21CQUlOLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7dUJBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7cUJBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDakQsQ0FBQztnQkFDTSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEQsTUFBTSxLQUFLLEdBQ1QsSUFBSSxJQUFJLElBQUk7b0JBQ1YsQ0FBQyxDQUFDLEVBQUU7b0JBQ0osQ0FBQyxDQUFDOzs7V0FHSCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7ZUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDMUQsQ0FBQztnQkFFTSxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMzRCxPQUFPLElBQUksQ0FBQztHQUNqQixDQUFDO1dBQ08sS0FBSztHQUNiLFFBQVE7R0FDUixLQUFLO0lBQ0osTUFBTTtDQUNULENBQUMsQ0FBQzthQUNJO1lBQ0QsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBa0I7UUFDN0IsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLEVBQUU7WUFDdkMsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNyQiw4QkFBOEI7WUFDOUIsT0FBTyxJQUFJLENBQ1QsaURBQWlEO2dCQUMvQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQ2pDLENBQUMsQ0FDRiwyQkFBMkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQzVDLENBQUMsQ0FDRiw4QkFBOEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUs7Z0JBQ3ZELElBQUksS0FBSyxNQUFNLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FDOUIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnZlcnRlciB9IGZyb20gXCIuLi9pbnRlcmZhY2UvY29udmVydGVyXCI7XG5pbXBvcnQgeyBEYXRhRWxlbWVudCB9IGZyb20gXCIuLi9pbnB1dFwiO1xuaW1wb3J0IHsgTm9uZSwgT3B0aW9uLCBTb21lIH0gZnJvbSBcIi4uL2NvcmUvb3B0aW9uXCI7XG5pbXBvcnQgeyBlbW9qaSwgcmVzdWx0VG9Db2xvciwgcmVzdWx0VG9NYXJrZG93biB9IGZyb20gXCIuLi91dGlsXCI7XG5cbmNsYXNzIFRlc3RDb3ZlcmFnZUNvbnZlcnRlciBpbXBsZW1lbnRzIENvbnZlcnRlciB7XG4gIGNvbnZlcnRIZWFkZXIoaGVhZGVyOiBEYXRhRWxlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGFibGUoaGVhZGVyKS5hbmRUaGVuKChiYWRnZSkgPT4ge1xuICAgICAgaWYgKGhlYWRlci5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICAgIGNvbnN0IGYgPSBlbW9qaShoZWFkZXIuZGF0YS5yZXN1bHQpO1xuICAgICAgICBjb25zdCBoID0gYCMjIyMjICR7Zn0gICR7aGVhZGVyLm5hbWV9XFxuYDtcbiAgICAgICAgY29uc3QgY292ZXJhZ2UgPSBgXG4gICAgICAgICoqQmFzaWMgQ292ZXJhZ2UqKjogXFxcXFxuICAgICAgICB8IFR5cGUgfCBDb3ZlcmFnZSB8XG4gICAgICAgIHwgLS0tLSB8IC0tLS0tLS0tIHxcbiAgICAgICAgfCBMaW5lIHwgJHtoZWFkZXIuZGF0YS5saW5lLnRvRml4ZWQoMil9JSB8XG4gICAgICAgIHwgU3RhdGVtZW50IHwgJHtoZWFkZXIuZGF0YS5zdGF0ZW1lbnQudG9GaXhlZCgyKX0lIHxcbiAgICAgICAgfCBGdW5jdGlvbiB8ICR7aGVhZGVyLmRhdGEuZnVuY3Rpb24udG9GaXhlZCgyKX0lIHxcbiAgICAgICAgfCBCcmFuY2ggfCAke2hlYWRlci5kYXRhLmJyYW5jaC50b0ZpeGVkKDIpfSUgfFxuYDtcbiAgICAgICAgY29uc3QgZGlmZiA9IGhlYWRlci5kYXRhLmRlbHRhO1xuICAgICAgICBjb25zdCBkRW1vamkgPSAoZDogbnVtYmVyKSA9PiAoZCA+IDAgPyBcIuKPq1wiIDogXCLij6xcIik7XG4gICAgICAgIGNvbnN0IGRlbHRhID1cbiAgICAgICAgICBkaWZmID09IG51bGxcbiAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgOiBgKipDaGFuZ2UgZnJvbSBiYXNlIG9mIFBSKio6IFxcXFxcbnwgVHlwZSB8IENvdmVyYWdlIHxcbnwgLS0tLSB8IC0tLS0tLS0tIHxcbnwgTGluZSB8ICR7ZGlmZi5saW5lLnRvRml4ZWQoMil9JSAke2RFbW9qaShkaWZmLmxpbmUpfSB8XG58IFN0YXRlbWVudCB8ICR7ZGlmZi5zdGF0ZW1lbnQudG9GaXhlZCgyKX0lICR7ZEVtb2ppKGRpZmYuc3RhdGVtZW50KX0gfFxufCBGdW5jdGlvbiB8ICR7ZGlmZi5mdW5jdGlvbi50b0ZpeGVkKDIpfSUgJHtkRW1vamkoZGlmZi5mdW5jdGlvbil9IHxcbnwgQnJhbmNoIHwgJHtkaWZmLmJyYW5jaC50b0ZpeGVkKDIpfSUgJHtkRW1vamkoZGlmZi5icmFuY2gpfSB8XG5gO1xuXG4gICAgICAgIGNvbnN0IHBvbGljeSA9IHJlc3VsdFRvTWFya2Rvd24oaGVhZGVyLmRhdGEucmVzdWx0RGV0YWlscyk7XG4gICAgICAgIHJldHVybiBTb21lKGBcbiAke2h9XG4gUmVwb3J0OiAke2JhZGdlfVxuICR7Y292ZXJhZ2V9XG4gJHtkZWx0YX1cbiAgJHtwb2xpY3l9XG5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBOb25lKCk7XG4gICAgfSk7XG4gIH1cblxuICBjb252ZXJ0VGFibGUodGFibGU6IERhdGFFbGVtZW50KTogT3B0aW9uPHN0cmluZz4ge1xuICAgIGlmICh0YWJsZS5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICBjb25zdCBjb2xvciA9IHJlc3VsdFRvQ29sb3IodGFibGUuZGF0YS5yZXN1bHQpO1xuICAgICAgY29uc3QgZCA9IHRhYmxlLmRhdGE7XG4gICAgICAvLyDimLIgMTAwJSB8IOKIrCA5MC4yJSB8IPCfnIkgMjUuNSVcbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvY292ZXJhZ2VgICtcbiAgICAgICAgICBgLSVFMiU5OCVCMiUyMCR7ZC5zdGF0ZW1lbnQudG9GaXhlZChcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApfSUyNSUyMCU3QyUyMCVFMiU4OCVBQyUyMCR7ZC5mdW5jdGlvbi50b0ZpeGVkKFxuICAgICAgICAgICAgMVxuICAgICAgICAgICl9JTI1JTIwJTdDJTIwJUYwJTlGJTlDJTg5JTIwJHtkLmJyYW5jaC50b0ZpeGVkKDEpfSUyNWAgK1xuICAgICAgICAgIGAtJHtjb2xvcn0pXSgke3RhYmxlLnVybH0pYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vbmUoKTtcbiAgfVxufVxuXG5leHBvcnQgeyBUZXN0Q292ZXJhZ2VDb252ZXJ0ZXIgfTtcbiJdfQ==