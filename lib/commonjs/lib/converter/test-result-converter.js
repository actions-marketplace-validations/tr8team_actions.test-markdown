import { None, Some } from "../core/option";
import { emoji, resultToColor, resultToMarkdown } from "../util";
class TestResultConverter {
    convertHeader(header) {
        return this.convertTable(header).andThen((badge) => {
            if (header.data.type === "test-result") {
                const f = emoji(header.data.result);
                const h = `##### ${f}  ${header.name}\n`;
                const result = `
        **Results**: \\
        | Tests | Amount |
        | ---- | -------- |
        | Pass | ${header.data.pass} |
        | Fail | ${header.data.fail} |
        | Skip | ${header.data.skip} |
`;
                const policy = resultToMarkdown(header.data.resultDetails);
                return Some(`
 ${h}
 Report: ${badge}
 ${result}
  ${policy}
`);
            }
            return None();
        });
    }
    convertTable(table) {
        if (table.data.type === "test-result") {
            const color = resultToColor(table.data.result);
            const d = table.data;
            // ✔ HELLO | ✘ HELLO | ➟ HELLO
            return Some(`[![badge](https://img.shields.io/badge/test` +
                `-%E2%9C%94%20${d.pass}%20%7C%20%E2%9C%98%20${d.fail}%20%7C%20%E2%9E%9F%20${d.skip}` +
                `-${color})](${table.url})`);
        }
        return None();
    }
}
export { TestResultConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1yZXN1bHQtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb252ZXJ0ZXIvdGVzdC1yZXN1bHQtY29udmVydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQVUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFakUsTUFBTSxtQkFBbUI7SUFDdkIsYUFBYSxDQUFDLE1BQW1CO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRTtnQkFDdEMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQztnQkFDekMsTUFBTSxNQUFNLEdBQUc7Ozs7bUJBSUosTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJO21CQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7bUJBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTtDQUNsQyxDQUFDO2dCQUNNLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzNELE9BQU8sSUFBSSxDQUFDO0dBQ2pCLENBQUM7V0FDTyxLQUFLO0dBQ2IsTUFBTTtJQUNMLE1BQU07Q0FDVCxDQUFDLENBQUM7YUFDSTtZQUNELE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWtCO1FBQzdCLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO1lBQ3JDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDckIsOEJBQThCO1lBQzlCLE9BQU8sSUFBSSxDQUNULDZDQUE2QztnQkFDM0MsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDcEYsSUFBSSxLQUFLLE1BQU0sS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUM5QixDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udmVydGVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9jb252ZXJ0ZXJcIjtcbmltcG9ydCB7IERhdGFFbGVtZW50IH0gZnJvbSBcIi4uL2lucHV0XCI7XG5pbXBvcnQgeyBOb25lLCBPcHRpb24sIFNvbWUgfSBmcm9tIFwiLi4vY29yZS9vcHRpb25cIjtcbmltcG9ydCB7IGVtb2ppLCByZXN1bHRUb0NvbG9yLCByZXN1bHRUb01hcmtkb3duIH0gZnJvbSBcIi4uL3V0aWxcIjtcblxuY2xhc3MgVGVzdFJlc3VsdENvbnZlcnRlciBpbXBsZW1lbnRzIENvbnZlcnRlciB7XG4gIGNvbnZlcnRIZWFkZXIoaGVhZGVyOiBEYXRhRWxlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGFibGUoaGVhZGVyKS5hbmRUaGVuKChiYWRnZSkgPT4ge1xuICAgICAgaWYgKGhlYWRlci5kYXRhLnR5cGUgPT09IFwidGVzdC1yZXN1bHRcIikge1xuICAgICAgICBjb25zdCBmID0gZW1vamkoaGVhZGVyLmRhdGEucmVzdWx0KTtcbiAgICAgICAgY29uc3QgaCA9IGAjIyMjIyAke2Z9ICAke2hlYWRlci5uYW1lfVxcbmA7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGBcbiAgICAgICAgKipSZXN1bHRzKio6IFxcXFxcbiAgICAgICAgfCBUZXN0cyB8IEFtb3VudCB8XG4gICAgICAgIHwgLS0tLSB8IC0tLS0tLS0tIHxcbiAgICAgICAgfCBQYXNzIHwgJHtoZWFkZXIuZGF0YS5wYXNzfSB8XG4gICAgICAgIHwgRmFpbCB8ICR7aGVhZGVyLmRhdGEuZmFpbH0gfFxuICAgICAgICB8IFNraXAgfCAke2hlYWRlci5kYXRhLnNraXB9IHxcbmA7XG4gICAgICAgIGNvbnN0IHBvbGljeSA9IHJlc3VsdFRvTWFya2Rvd24oaGVhZGVyLmRhdGEucmVzdWx0RGV0YWlscyk7XG4gICAgICAgIHJldHVybiBTb21lKGBcbiAke2h9XG4gUmVwb3J0OiAke2JhZGdlfVxuICR7cmVzdWx0fVxuICAke3BvbGljeX1cbmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vbmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnZlcnRUYWJsZSh0YWJsZTogRGF0YUVsZW1lbnQpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgaWYgKHRhYmxlLmRhdGEudHlwZSA9PT0gXCJ0ZXN0LXJlc3VsdFwiKSB7XG4gICAgICBjb25zdCBjb2xvciA9IHJlc3VsdFRvQ29sb3IodGFibGUuZGF0YS5yZXN1bHQpO1xuICAgICAgY29uc3QgZCA9IHRhYmxlLmRhdGE7XG4gICAgICAvLyDinJQgSEVMTE8gfCDinJggSEVMTE8gfCDinp8gSEVMTE9cbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvdGVzdGAgK1xuICAgICAgICAgIGAtJUUyJTlDJTk0JTIwJHtkLnBhc3N9JTIwJTdDJTIwJUUyJTlDJTk4JTIwJHtkLmZhaWx9JTIwJTdDJTIwJUUyJTlFJTlGJTIwJHtkLnNraXB9YCArXG4gICAgICAgICAgYC0ke2NvbG9yfSldKCR7dGFibGUudXJsfSlgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gTm9uZSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IFRlc3RSZXN1bHRDb252ZXJ0ZXIgfTtcbiJdfQ==