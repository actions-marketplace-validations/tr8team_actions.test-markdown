import { Err, Ok, Res } from "./core/result";
class SimpleTableGenerator {
    #converters;
    constructor(converters, k) {
        this.#converters = converters;
        k.AssertExtend();
    }
    getHeaders(input) {
        return input
            .map((x) => x.items.map((y) => y.name))
            .flat(1)
            .Unique();
    }
    itemToElement(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertTable(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    buildTableRow(headers, h) {
        const rowResultRaw = headers.map((header) => {
            const r = h.items.find((x) => x.name === header);
            if (r == null) {
                return Ok("-");
            }
            return this.itemToElement(r);
        });
        return Res.all(...rowResultRaw).map((x) => `|${x.join(" | ")} |`);
    }
    buildHeaderRow(headers) {
        const headerRow1 = `${headers.map((header) => `| ${header} `).join("")}|\n`;
        const headerRow2 = `${headers
            .map((header) => `| ${"-".Repeat(header.length.AtMin(3))} `)
            .join("")}|\n`;
        return headerRow1 + headerRow2;
    }
    generateTable(input) {
        const headers = this.getHeaders(input);
        const headerRow = this.buildHeaderRow(headers);
        // build children
        const rowsResults = input.map((h) => this.buildTableRow(headers, h));
        return Res.all(...rowsResults)
            .map((x) => headerRow + x.join("\n"))
            .mapErr((x) => x.flat(1));
    }
}
export { SimpleTableGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXRhYmxlLWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2ltcGxlLXRhYmxlLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFLckQsTUFBTSxvQkFBb0I7SUFDZixXQUFXLENBQWM7SUFFbEMsWUFBWSxVQUF1QixFQUFFLENBQU87UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixPQUFPLEtBQUs7YUFDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNQLE1BQU0sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFpQjtRQUM3QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUMzRCxDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ2xCLE9BQU8sR0FBRyxDQUNSLElBQUksS0FBSyxDQUFDLCtCQUErQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQzNELENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBVyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQWlCLEVBQUUsQ0FBZTtRQUM5QyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUNiLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hCO1lBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxjQUFjLENBQUMsT0FBaUI7UUFDOUIsTUFBTSxVQUFVLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDNUUsTUFBTSxVQUFVLEdBQUcsR0FBRyxPQUFPO2FBQzFCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQzthQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNqQixPQUFPLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFjO1FBQzFCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxpQkFBaUI7UUFDakIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUM7YUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRhYmxlR2VuZXJhdG9yIH0gZnJvbSBcIi4vaW50ZXJmYWNlL3RhYmxlLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgRXJyLCBPaywgUmVzLCBSZXN1bHQgfSBmcm9tIFwiLi9jb3JlL3Jlc3VsdFwiO1xuaW1wb3J0IHsgRGF0YUVsZW1lbnQsIEhpc3RvcnksIEhpc3RvcnlFbnRyeSB9IGZyb20gXCIuL2lucHV0XCI7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2UvY29udmVydGVyXCI7XG5pbXBvcnQgeyBDb3JlIH0gZnJvbSBcIkBraXJpbm5lZS9jb3JlXCI7XG5cbmNsYXNzIFNpbXBsZVRhYmxlR2VuZXJhdG9yIGltcGxlbWVudHMgVGFibGVHZW5lcmF0b3Ige1xuICByZWFkb25seSAjY29udmVydGVyczogQ29udmVydGVyW107XG5cbiAgY29uc3RydWN0b3IoY29udmVydGVyczogQ29udmVydGVyW10sIGs6IENvcmUpIHtcbiAgICB0aGlzLiNjb252ZXJ0ZXJzID0gY29udmVydGVycztcbiAgICBrLkFzc2VydEV4dGVuZCgpO1xuICB9XG5cbiAgZ2V0SGVhZGVycyhpbnB1dDogSGlzdG9yeSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgIC5tYXAoKHgpID0+IHguaXRlbXMubWFwKCh5KSA9PiB5Lm5hbWUpKVxuICAgICAgLmZsYXQoMSlcbiAgICAgIC5VbmlxdWUoKTtcbiAgfVxuXG4gIGl0ZW1Ub0VsZW1lbnQoaXRlbTogRGF0YUVsZW1lbnQpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcj4ge1xuICAgIHJldHVybiBSZXMuYXN5bmMoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udmVydGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHRoaXMuI2NvbnZlcnRlcnMubWFwKChjKSA9PiBjLmNvbnZlcnRUYWJsZShpdGVtKS5uYXRpdmUoKSlcbiAgICAgICk7XG4gICAgICBjb25zdCB0b3AgPSBjb252ZXJ0ZWQuZmlsdGVyKCh4KSA9PiB4ICE9IG51bGwpO1xuICAgICAgaWYgKHRvcC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgaWYgKHRvcC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIEVycihcbiAgICAgICAgICAgIG5ldyBFcnJvcihgTXVsdGlwbGUgY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFcnIobmV3IEVycm9yKGBObyBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2sodG9wWzBdIGFzIHN0cmluZyk7XG4gICAgfSk7XG4gIH1cblxuICBidWlsZFRhYmxlUm93KGhlYWRlcnM6IHN0cmluZ1tdLCBoOiBIaXN0b3J5RW50cnkpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcltdPiB7XG4gICAgY29uc3Qgcm93UmVzdWx0UmF3ID0gaGVhZGVycy5tYXAoKGhlYWRlcikgPT4ge1xuICAgICAgY29uc3QgciA9IGguaXRlbXMuZmluZCgoeCkgPT4geC5uYW1lID09PSBoZWFkZXIpO1xuICAgICAgaWYgKHIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gT2soXCItXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaXRlbVRvRWxlbWVudChyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVzLmFsbCguLi5yb3dSZXN1bHRSYXcpLm1hcCgoeCkgPT4gYHwke3guam9pbihcIiB8IFwiKX0gfGApO1xuICB9XG5cbiAgYnVpbGRIZWFkZXJSb3coaGVhZGVyczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGhlYWRlclJvdzEgPSBgJHtoZWFkZXJzLm1hcCgoaGVhZGVyKSA9PiBgfCAke2hlYWRlcn0gYCkuam9pbihcIlwiKX18XFxuYDtcbiAgICBjb25zdCBoZWFkZXJSb3cyID0gYCR7aGVhZGVyc1xuICAgICAgLm1hcCgoaGVhZGVyKSA9PiBgfCAke1wiLVwiLlJlcGVhdChoZWFkZXIubGVuZ3RoLkF0TWluKDMpKX0gYClcbiAgICAgIC5qb2luKFwiXCIpfXxcXG5gO1xuICAgIHJldHVybiBoZWFkZXJSb3cxICsgaGVhZGVyUm93MjtcbiAgfVxuXG4gIGdlbmVyYXRlVGFibGUoaW5wdXQ6IEhpc3RvcnkpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcltdPiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycyhpbnB1dCk7XG4gICAgY29uc3QgaGVhZGVyUm93ID0gdGhpcy5idWlsZEhlYWRlclJvdyhoZWFkZXJzKTtcblxuICAgIC8vIGJ1aWxkIGNoaWxkcmVuXG4gICAgY29uc3Qgcm93c1Jlc3VsdHMgPSBpbnB1dC5tYXAoKGgpID0+IHRoaXMuYnVpbGRUYWJsZVJvdyhoZWFkZXJzLCBoKSk7XG4gICAgcmV0dXJuIFJlcy5hbGwoLi4ucm93c1Jlc3VsdHMpXG4gICAgICAubWFwKCh4KSA9PiBoZWFkZXJSb3cgKyB4LmpvaW4oXCJcXG5cIikpXG4gICAgICAubWFwRXJyKCh4KSA9PiB4LmZsYXQoMSkpO1xuICB9XG59XG5cbmV4cG9ydCB7IFNpbXBsZVRhYmxlR2VuZXJhdG9yIH07XG4iXX0=