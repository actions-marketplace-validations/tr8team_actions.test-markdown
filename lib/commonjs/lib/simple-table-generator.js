import { Err, Ok, Res } from "./core/result";
class SimpleTableGenerator {
    #converters;
    constructor(converters, k) {
        this.#converters = converters;
        k.AssertExtend();
    }
    getHeaders(input) {
        return input
            .map((x) => x.items.map((y) => y.name))
            .flat(1)
            .Unique();
    }
    itemToElement(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertTable(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    buildTableRow(headers, h) {
        const rowResultRaw = headers.map((header) => {
            const r = h.items.find((x) => x.name === header);
            if (r == null) {
                return Ok("`-`");
            }
            return this.itemToElement(r);
        });
        return Res.all(...rowResultRaw)
            .map((x) => [
            `[${h.sha}](${h.url})`,
            `[Github Action](${h.action})`,
            ...x,
        ])
            .map((x) => `|${x.join(" | ")} |`);
    }
    buildHeaderRow(h) {
        const headers = ["Commit", "Action", ...h];
        const headerRow1 = `${headers.map((header) => `| ${header} `).join("")}|\n`;
        const headerRow2 = `${headers
            .map((header) => `| ${"-".Repeat(header.length.AtMin(3))} `)
            .join("")}|\n`;
        return headerRow1 + headerRow2;
    }
    generateTable(input) {
        const headers = this.getHeaders(input);
        const headerRow = this.buildHeaderRow(headers);
        // build children
        const rowsResults = input.map((h) => this.buildTableRow(headers, h));
        return Res.all(...rowsResults)
            .map((x) => headerRow + x.join("\n"))
            .mapErr((x) => x.flat(1));
    }
}
export { SimpleTableGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXRhYmxlLWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2ltcGxlLXRhYmxlLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFLckQsTUFBTSxvQkFBb0I7SUFDZixXQUFXLENBQWM7SUFFbEMsWUFBWSxVQUF1QixFQUFFLENBQU87UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixPQUFPLEtBQUs7YUFDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNQLE1BQU0sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFpQjtRQUM3QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUMzRCxDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0s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O2FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGFibGVHZW5lcmF0b3IgfSBmcm9tIFwiLi9pbnRlcmZhY2UvdGFibGUtZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyBFcnIsIE9rLCBSZXMsIFJlc3VsdCB9IGZyb20gXCIuL2NvcmUvcmVzdWx0XCI7XG5pbXBvcnQgeyBEYXRhRWxlbWVudCwgSGlzdG9yeSwgSGlzdG9yeUVudHJ5IH0gZnJvbSBcIi4vaW5wdXRcIjtcbmltcG9ydCB7IENvbnZlcnRlciB9IGZyb20gXCIuL2ludGVyZmFjZS9jb252ZXJ0ZXJcIjtcbmltcG9ydCB7IENvcmUgfSBmcm9tIFwiQGtpcmlubmVlL2NvcmVcIjtcblxuY2xhc3MgU2ltcGxlVGFibGVHZW5lcmF0b3IgaW1wbGVtZW50cyBUYWJsZUdlbmVyYXRvciB7XG4gIHJlYWRvbmx5ICNjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXTtcblxuICBjb25zdHJ1Y3Rvcihjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXSwgazogQ29yZSkge1xuICAgIHRoaXMuI2NvbnZlcnRlcnMgPSBjb252ZXJ0ZXJzO1xuICAgIGsuQXNzZXJ0RXh0ZW5kKCk7XG4gIH1cblxuICBnZXRIZWFkZXJzKGlucHV0OiBIaXN0b3J5KTogc3RyaW5nW10ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgLm1hcCgoeCkgPT4geC5pdGVtcy5tYXAoKHkpID0+IHkubmFtZSkpXG4gICAgICAuZmxhdCgxKVxuICAgICAgLlVuaXF1ZSgpO1xuICB9XG5cbiAgaXRlbVRvRWxlbWVudChpdGVtOiBEYXRhRWxlbWVudCk6IFJlc3VsdDxzdHJpbmcsIEVycm9yPiB7XG4gICAgcmV0dXJuIFJlcy5hc3luYyhhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgdGhpcy4jY29udmVydGVycy5tYXAoKGMpID0+IGMuY29udmVydFRhYmxlKGl0ZW0pLm5hdGl2ZSgpKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHRvcCA9IGNvbnZlcnRlZC5maWx0ZXIoKHgpID0+IHggIT0gbnVsbCk7XG4gICAgICBpZiAodG9wLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBpZiAodG9wLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gRXJyKFxuICAgICAgICAgICAgbmV3IEVycm9yKGBNdWx0aXBsZSBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVycihuZXcgRXJyb3IoYE5vIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPayh0b3BbMF0gYXMgc3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkVGFibGVSb3coaGVhZGVyczogc3RyaW5nW10sIGg6IEhpc3RvcnlFbnRyeSk6IFJlc3VsdDxzdHJpbmcsIEVycm9yW10+IHtcbiAgICBjb25zdCByb3dSZXN1bHRSYXcgPSBoZWFkZXJzLm1hcCgoaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCByID0gaC5pdGVtcy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGhlYWRlcik7XG4gICAgICBpZiAociA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBPayhcImAtYFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLml0ZW1Ub0VsZW1lbnQocik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlcy5hbGwoLi4ucm93UmVzdWx0UmF3KVxuICAgICAgLm1hcCgoeCkgPT4gW1xuICAgICAgICBgWyR7aC5zaGF9XSgke2gudXJsfSlgLFxuICAgICAgICBgW0dpdGh1YiBBY3Rpb25dKCR7aC5hY3Rpb259KWAsXG4gICAgICAgIC4uLngsXG4gICAgICBdKVxuICAgICAgLm1hcCgoeCkgPT4gYHwke3guam9pbihcIiB8IFwiKX0gfGApO1xuICB9XG5cbiAgYnVpbGRIZWFkZXJSb3coaDogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXCJDb21taXRcIiwgXCJBY3Rpb25cIiwgLi4uaF07XG4gICAgY29uc3QgaGVhZGVyUm93MSA9IGAke2hlYWRlcnMubWFwKChoZWFkZXIpID0+IGB8ICR7aGVhZGVyfSBgKS5qb2luKFwiXCIpfXxcXG5gO1xuICAgIGNvbnN0IGhlYWRlclJvdzIgPSBgJHtoZWFkZXJzXG4gICAgICAubWFwKChoZWFkZXIpID0+IGB8ICR7XCItXCIuUmVwZWF0KGhlYWRlci5sZW5ndGguQXRNaW4oMykpfSBgKVxuICAgICAgLmpvaW4oXCJcIil9fFxcbmA7XG4gICAgcmV0dXJuIGhlYWRlclJvdzEgKyBoZWFkZXJSb3cyO1xuICB9XG5cbiAgZ2VuZXJhdGVUYWJsZShpbnB1dDogSGlzdG9yeSk6IFJlc3VsdDxzdHJpbmcsIEVycm9yW10+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKGlucHV0KTtcbiAgICBjb25zdCBoZWFkZXJSb3cgPSB0aGlzLmJ1aWxkSGVhZGVyUm93KGhlYWRlcnMpO1xuXG4gICAgLy8gYnVpbGQgY2hpbGRyZW5cbiAgICBjb25zdCByb3dzUmVzdWx0cyA9IGlucHV0Lm1hcCgoaCkgPT4gdGhpcy5idWlsZFRhYmxlUm93KGhlYWRlcnMsIGgpKTtcbiAgICByZXR1cm4gUmVzLmFsbCguLi5yb3dzUmVzdWx0cylcbiAgICAgIC5tYXAoKHgpID0+IGhlYWRlclJvdyArIHguam9pbihcIlxcblwiKSlcbiAgICAgIC5tYXBFcnIoKHgpID0+IHguZmxhdCgxKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2ltcGxlVGFibGVHZW5lcmF0b3IgfTtcbiJdfQ==