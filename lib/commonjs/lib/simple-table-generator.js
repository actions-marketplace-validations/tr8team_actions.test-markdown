import { Err, Ok, Res } from "./core/result";
class SimpleTableGenerator {
    #converters;
    constructor(converters, k) {
        this.#converters = converters;
        k.AssertExtend();
    }
    getHeaders(input) {
        return input
            .map((x) => x.items.map((y) => y.name))
            .flat(1)
            .Unique();
    }
    itemToElement(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertTable(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    buildTableRow(headers, h) {
        const rowResultRaw = headers.map((header) => {
            const r = h.items.find((x) => x.name === header);
            if (r == null) {
                return Ok("`-`");
            }
            return this.itemToElement(r);
        });
        return Res.all(...rowResultRaw)
            .map((x) => [
            `[${h.sha.Take(6)}](${h.url})`,
            `[Action](${h.action})`,
            ...x,
        ])
            .map((x) => `|${x.join(" | ")} |`);
    }
    buildHeaderRow(h) {
        const headers = ["Commit", "Action", ...h];
        const headerRow1 = `${headers.map((header) => `| ${header} `).join("")}|\n`;
        const headerRow2 = `${headers
            .map((header) => `| ${"-".Repeat(header.length.AtMin(3))} `)
            .join("")}|\n`;
        return headerRow1 + headerRow2;
    }
    generateTable(input) {
        const headers = this.getHeaders(input);
        const headerRow = this.buildHeaderRow(headers);
        // build children
        const rowsResults = input.map((h) => this.buildTableRow(headers, h));
        return Res.all(...rowsResults)
            .map((x) => headerRow + x.join("\n"))
            .mapErr((x) => x.flat(1));
    }
}
export { SimpleTableGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXRhYmxlLWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2ltcGxlLXRhYmxlLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFLckQsTUFBTSxvQkFBb0I7SUFDZixXQUFXLENBQWM7SUFFbEMsWUFBWSxVQUF1QixFQUFFLENBQU87UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixPQUFPLEtBQUs7YUFDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNQLE1BQU0sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFpQjtRQUM3QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUMzRCxDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0s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QUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYWJsZUdlbmVyYXRvciB9IGZyb20gXCIuL2ludGVyZmFjZS90YWJsZS1nZW5lcmF0b3JcIjtcbmltcG9ydCB7IEVyciwgT2ssIFJlcywgUmVzdWx0IH0gZnJvbSBcIi4vY29yZS9yZXN1bHRcIjtcbmltcG9ydCB7IERhdGFFbGVtZW50LCBIaXN0b3J5LCBIaXN0b3J5RW50cnkgfSBmcm9tIFwiLi9pbnB1dFwiO1xuaW1wb3J0IHsgQ29udmVydGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlL2NvbnZlcnRlclwiO1xuaW1wb3J0IHsgQ29yZSB9IGZyb20gXCJAa2lyaW5uZWUvY29yZVwiO1xuXG5jbGFzcyBTaW1wbGVUYWJsZUdlbmVyYXRvciBpbXBsZW1lbnRzIFRhYmxlR2VuZXJhdG9yIHtcbiAgcmVhZG9ubHkgI2NvbnZlcnRlcnM6IENvbnZlcnRlcltdO1xuXG4gIGNvbnN0cnVjdG9yKGNvbnZlcnRlcnM6IENvbnZlcnRlcltdLCBrOiBDb3JlKSB7XG4gICAgdGhpcy4jY29udmVydGVycyA9IGNvbnZlcnRlcnM7XG4gICAgay5Bc3NlcnRFeHRlbmQoKTtcbiAgfVxuXG4gIGdldEhlYWRlcnMoaW5wdXQ6IEhpc3RvcnkpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAubWFwKCh4KSA9PiB4Lml0ZW1zLm1hcCgoeSkgPT4geS5uYW1lKSlcbiAgICAgIC5mbGF0KDEpXG4gICAgICAuVW5pcXVlKCk7XG4gIH1cblxuICBpdGVtVG9FbGVtZW50KGl0ZW06IERhdGFFbGVtZW50KTogUmVzdWx0PHN0cmluZywgRXJyb3I+IHtcbiAgICByZXR1cm4gUmVzLmFzeW5jKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICB0aGlzLiNjb252ZXJ0ZXJzLm1hcCgoYykgPT4gYy5jb252ZXJ0VGFibGUoaXRlbSkubmF0aXZlKCkpXG4gICAgICApO1xuICAgICAgY29uc3QgdG9wID0gY29udmVydGVkLmZpbHRlcigoeCkgPT4geCAhPSBudWxsKTtcbiAgICAgIGlmICh0b3AubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIGlmICh0b3AubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiBFcnIoXG4gICAgICAgICAgICBuZXcgRXJyb3IoYE11bHRpcGxlIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXJyKG5ldyBFcnJvcihgTm8gY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9rKHRvcFswXSBhcyBzdHJpbmcpO1xuICAgIH0pO1xuICB9XG5cbiAgYnVpbGRUYWJsZVJvdyhoZWFkZXJzOiBzdHJpbmdbXSwgaDogSGlzdG9yeUVudHJ5KTogUmVzdWx0PHN0cmluZywgRXJyb3JbXT4ge1xuICAgIGNvbnN0IHJvd1Jlc3VsdFJhdyA9IGhlYWRlcnMubWFwKChoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IHIgPSBoLml0ZW1zLmZpbmQoKHgpID0+IHgubmFtZSA9PT0gaGVhZGVyKTtcbiAgICAgIGlmIChyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIE9rKFwiYC1gXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaXRlbVRvRWxlbWVudChyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVzLmFsbCguLi5yb3dSZXN1bHRSYXcpXG4gICAgICAubWFwKCh4KSA9PiBbXG4gICAgICAgIGBbJHtoLnNoYS5UYWtlKDYpfV0oJHtoLnVybH0pYCxcbiAgICAgICAgYFtBY3Rpb25dKCR7aC5hY3Rpb259KWAsXG4gICAgICAgIC4uLngsXG4gICAgICBdKVxuICAgICAgLm1hcCgoeCkgPT4gYHwke3guam9pbihcIiB8IFwiKX0gfGApO1xuICB9XG5cbiAgYnVpbGRIZWFkZXJSb3coaDogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXCJDb21taXRcIiwgXCJBY3Rpb25cIiwgLi4uaF07XG4gICAgY29uc3QgaGVhZGVyUm93MSA9IGAke2hlYWRlcnMubWFwKChoZWFkZXIpID0+IGB8ICR7aGVhZGVyfSBgKS5qb2luKFwiXCIpfXxcXG5gO1xuICAgIGNvbnN0IGhlYWRlclJvdzIgPSBgJHtoZWFkZXJzXG4gICAgICAubWFwKChoZWFkZXIpID0+IGB8ICR7XCItXCIuUmVwZWF0KGhlYWRlci5sZW5ndGguQXRNaW4oMykpfSBgKVxuICAgICAgLmpvaW4oXCJcIil9fFxcbmA7XG4gICAgcmV0dXJuIGhlYWRlclJvdzEgKyBoZWFkZXJSb3cyO1xuICB9XG5cbiAgZ2VuZXJhdGVUYWJsZShpbnB1dDogSGlzdG9yeSk6IFJlc3VsdDxzdHJpbmcsIEVycm9yW10+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKGlucHV0KTtcbiAgICBjb25zdCBoZWFkZXJSb3cgPSB0aGlzLmJ1aWxkSGVhZGVyUm93KGhlYWRlcnMpO1xuXG4gICAgLy8gYnVpbGQgY2hpbGRyZW5cbiAgICBjb25zdCByb3dzUmVzdWx0cyA9IGlucHV0Lm1hcCgoaCkgPT4gdGhpcy5idWlsZFRhYmxlUm93KGhlYWRlcnMsIGgpKTtcbiAgICByZXR1cm4gUmVzLmFsbCguLi5yb3dzUmVzdWx0cylcbiAgICAgIC5tYXAoKHgpID0+IGhlYWRlclJvdyArIHguam9pbihcIlxcblwiKSlcbiAgICAgIC5tYXBFcnIoKHgpID0+IHguZmxhdCgxKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2ltcGxlVGFibGVHZW5lcmF0b3IgfTtcbiJdfQ==